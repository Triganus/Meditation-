import React, { useState, useEffect, useRef } from 'react';
import './MeditationTimer.css';
import AudioGenerator from '../utils/AudioGenerator';

const MeditationTimer = ({ selectedSound, onBack, onSessionComplete }) => {
  const [time, setTime] = useState(300); // 5 minutes default
  const [isRunning, setIsRunning] = useState(false);
  const [initialTime] = useState(300);
  const intervalRef = useRef(null);
  const audioGeneratorRef = useRef(null);
  const audioRef = useRef(null);

  useEffect(() => {
    if (isRunning && time > 0) {
      intervalRef.current = setInterval(() => {
        setTime(prevTime => {
          if (prevTime <= 1) {
            setIsRunning(false);
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
            if (audioRef.current) {
              audioRef.current.pause();
            }
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Web Audio API
            if (audioGeneratorRef.current) {
              audioGeneratorRef.current.stop();
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            if (onSessionComplete) {
              onSessionComplete({
                duration: initialTime,
                sound: selectedSound?.name,
                completedAt: new Date().toISOString()
              });
            }
            
            alert('üéâ –°–µ—Å—Å–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!');
            return 0;
          }
          return prevTime - 1;
        });
      }, 1000);
    } else {
      clearInterval(intervalRef.current);
    }

    return () => clearInterval(intervalRef.current);
  }, [isRunning, time, initialTime, onSessionComplete, selectedSound?.name]);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    audioGeneratorRef.current = new AudioGenerator();
    audioGeneratorRef.current.init();

    return () => {
      if (audioGeneratorRef.current) {
        audioGeneratorRef.current.stop();
      }
    };
  }, []);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const playSelectedSound = async () => {
    if (!selectedSound) return;

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
    const soundFileMap = {
      '–ö–∞–ø–ª–∏ –¥–æ–∂–¥—è': 'rain',
      '–ü–æ–¥ –î–æ–∂–¥–µ–º': 'rain',
      '–®—É–º –≤–æ–ª–Ω': 'ocean',
      '–ü–æ–¥ –≤–æ–¥–æ–π': 'ocean',
      '–õ–µ—Å': 'forest',
      '–ù–µ–∏—Å—Ç–æ–≤–∞—è –ø—Ä–∏—Ä–æ–¥–∞': 'forest',
      '–¢–∏–±–µ—Ç—Å–∫–∞—è –ß–∞—à–∞': 'tibetan-bowl',
      '–î—Ä–æ–≤—è–Ω–æ–π –ö–∞–º–∏–Ω': 'fireplace',
      '–ö–∞–º–∏–Ω': 'fireplace'
    };

    const fileName = soundFileMap[selectedSound.name];
    
    if (fileName && audioRef.current) {
      try {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        const formats = ['wav', 'mp3', 'ogg'];
        let audioLoaded = false;
        
        for (const format of formats) {
          try {
            audioRef.current.src = `/sounds/${fileName}.${format}`;
            await audioRef.current.load();
            await audioRef.current.play();
            audioLoaded = true;
            console.log(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${fileName}.${format}`);
            break;
          } catch (error) {
            console.log(`–§–∞–π–ª ${fileName}.${format} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }
        }
        
        if (!audioLoaded) {
          throw new Error('–†–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      } catch (error) {
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Web Audio API');
        // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Web Audio API
        if (audioGeneratorRef.current) {
          const soundMap = {
            '–ö–∞–ø–ª–∏ –¥–æ–∂–¥—è': 'playRain',
            '–®—É–º –≤–æ–ª–Ω': 'playOcean',
            '–õ–µ—Å': 'playForest',
            '–¢–∏–±–µ—Ç—Å–∫–∞—è –ß–∞—à–∞': 'playBowl',
            '–î—Ä–æ–≤—è–Ω–æ–π –ö–∞–º–∏–Ω': 'playFireplace',
            '–ö–∞–º–∏–Ω': 'playFireplace',
            '–ü–æ–¥ –≤–æ–¥–æ–π': 'playOcean',
            '–ì–ª—É–±–æ–∫–æ–µ —Ä–∞–∑–¥—É–º—å–µ': 'playBowl',
            '–ù–µ–∏—Å—Ç–æ–≤–∞—è –ø—Ä–∏—Ä–æ–¥–∞': 'playForest',
            '–ü–æ–¥ –î–æ–∂–¥–µ–º': 'playRain'
          };

          const soundMethod = soundMap[selectedSound.name] || 'playRain';
          if (audioGeneratorRef.current[soundMethod]) {
            audioGeneratorRef.current[soundMethod]();
          }
        }
      }
    }
  };

  const handleStart = () => {
    setIsRunning(true);
    if (selectedSound) {
      playSelectedSound();
    }
  };

  const handlePause = () => {
    setIsRunning(false);
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
    if (audioRef.current) {
      audioRef.current.pause();
    }
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Web Audio API
    if (audioGeneratorRef.current) {
      audioGeneratorRef.current.stop();
    }
  };

  const handleReset = () => {
    setIsRunning(false);
    setTime(initialTime);
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
    }
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Web Audio API
    if (audioGeneratorRef.current) {
      audioGeneratorRef.current.stop();
    }
  };

  const progress = ((initialTime - time) / initialTime) * 100;

  return (
    <div className="meditation-timer">
      <div className="timer-header">
        <button className="back-btn" onClick={onBack}>‚Üê</button>
        <h2>–î–µ–Ω—å 1</h2>
        <button className="close-btn" onClick={onBack}>‚úï</button>
      </div>

      <div className="timer-content">
        <div className="lesson-info">
          <h1>–û—Å–Ω–æ–≤—ã</h1>
          <p>–ú–æ–º–µ–Ω—Ç –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å</p>
        </div>

        <div className="timer-circle">
          <svg viewBox="0 0 200 200" className="progress-ring">
            <circle
              cx="100"
              cy="100"
              r="90"
              fill="none"
              stroke="rgba(255,255,255,0.2)"
              strokeWidth="4"
            />
            <circle
              cx="100"
              cy="100"
              r="90"
              fill="none"
              stroke="white"
              strokeWidth="4"
              strokeDasharray={`${2 * Math.PI * 90}`}
              strokeDashoffset={`${2 * Math.PI * 90 * (1 - progress / 100)}`}
              transform="rotate(-90 100 100)"
              className="progress-circle"
            />
          </svg>
          <div className="timer-display">
            <span className="time-text">{formatTime(time)}</span>
          </div>
        </div>

        <div className="timer-controls">
          <button className="control-btn" onClick={() => setTime(Math.max(60, time - 60))}>
            <span>-1–º</span>
          </button>
          
          <button className="play-pause-btn" onClick={isRunning ? handlePause : handleStart}>
            {isRunning ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
          </button>
          
          <button className="control-btn" onClick={() => setTime(time + 60)}>
            <span>+1–º</span>
          </button>
        </div>

        <div className="current-time">
          {formatTime(time)}
        </div>

        {selectedSound && (
          <div className="sound-info">
            <p>–§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞</p>
            <p>{selectedSound.name}</p>
          </div>
        )}

        <button className="reset-btn" onClick={handleReset}>
          –°–±—Ä–æ—Å
        </button>
      </div>

      {/* –°–∫—Ä—ã—Ç—ã–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ */}
      <audio 
        ref={audioRef}
        loop
        style={{ display: 'none' }}
        preload="none"
      />
    </div>
  );
};

export default MeditationTimer;
